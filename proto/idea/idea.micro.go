// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/idea/idea.proto

/*
Package idea is a generated protocol buffer package.

It is generated from these files:
	proto/idea/idea.proto

It has these top-level messages:
	ShowIdeasRequest
	ShowIdeasResponse
	CreateIdeasRequest
	CreateIdeasResponse
	UpdateIdeasRequest
	UpdateIdeasResponse
	HideIdeasResponse
	DeleteIdeasRequest
	DeleteIdeasResponse
	Ideas
	HideIdeasRequest
	Idea
*/
package idea

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/jianhan/ms-sui-ideas/proto/rating"
import _ "github.com/jianhan/ms-sui-ideas/proto/story"
import _ "github.com/jianhan/ms-sui-ideas/proto/occupation"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for IdeaService service

type IdeaServiceClient interface {
	CreateIdeas(ctx context.Context, in *CreateIdeasRequest, opts ...client.CallOption) (*CreateIdeasResponse, error)
	UpdateIdeas(ctx context.Context, in *UpdateIdeasRequest, opts ...client.CallOption) (*UpdateIdeasResponse, error)
	DeleteIdeas(ctx context.Context, in *DeleteIdeasRequest, opts ...client.CallOption) (*DeleteIdeasResponse, error)
	HideIdeas(ctx context.Context, in *HideIdeasRequest, opts ...client.CallOption) (*HideIdeasResponse, error)
	ShowIdeas(ctx context.Context, in *ShowIdeasRequest, opts ...client.CallOption) (*ShowIdeasResponse, error)
}

type ideaServiceClient struct {
	c           client.Client
	serviceName string
}

func NewIdeaServiceClient(serviceName string, c client.Client) IdeaServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.ideas"
	}
	return &ideaServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *ideaServiceClient) CreateIdeas(ctx context.Context, in *CreateIdeasRequest, opts ...client.CallOption) (*CreateIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "IdeaService.CreateIdeas", in)
	out := new(CreateIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ideaServiceClient) UpdateIdeas(ctx context.Context, in *UpdateIdeasRequest, opts ...client.CallOption) (*UpdateIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "IdeaService.UpdateIdeas", in)
	out := new(UpdateIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ideaServiceClient) DeleteIdeas(ctx context.Context, in *DeleteIdeasRequest, opts ...client.CallOption) (*DeleteIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "IdeaService.DeleteIdeas", in)
	out := new(DeleteIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ideaServiceClient) HideIdeas(ctx context.Context, in *HideIdeasRequest, opts ...client.CallOption) (*HideIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "IdeaService.HideIdeas", in)
	out := new(HideIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ideaServiceClient) ShowIdeas(ctx context.Context, in *ShowIdeasRequest, opts ...client.CallOption) (*ShowIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "IdeaService.ShowIdeas", in)
	out := new(ShowIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IdeaService service

type IdeaServiceHandler interface {
	CreateIdeas(context.Context, *CreateIdeasRequest, *CreateIdeasResponse) error
	UpdateIdeas(context.Context, *UpdateIdeasRequest, *UpdateIdeasResponse) error
	DeleteIdeas(context.Context, *DeleteIdeasRequest, *DeleteIdeasResponse) error
	HideIdeas(context.Context, *HideIdeasRequest, *HideIdeasResponse) error
	ShowIdeas(context.Context, *ShowIdeasRequest, *ShowIdeasResponse) error
}

func RegisterIdeaServiceHandler(s server.Server, hdlr IdeaServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&IdeaService{hdlr}, opts...))
}

type IdeaService struct {
	IdeaServiceHandler
}

func (h *IdeaService) CreateIdeas(ctx context.Context, in *CreateIdeasRequest, out *CreateIdeasResponse) error {
	return h.IdeaServiceHandler.CreateIdeas(ctx, in, out)
}

func (h *IdeaService) UpdateIdeas(ctx context.Context, in *UpdateIdeasRequest, out *UpdateIdeasResponse) error {
	return h.IdeaServiceHandler.UpdateIdeas(ctx, in, out)
}

func (h *IdeaService) DeleteIdeas(ctx context.Context, in *DeleteIdeasRequest, out *DeleteIdeasResponse) error {
	return h.IdeaServiceHandler.DeleteIdeas(ctx, in, out)
}

func (h *IdeaService) HideIdeas(ctx context.Context, in *HideIdeasRequest, out *HideIdeasResponse) error {
	return h.IdeaServiceHandler.HideIdeas(ctx, in, out)
}

func (h *IdeaService) ShowIdeas(ctx context.Context, in *ShowIdeasRequest, out *ShowIdeasResponse) error {
	return h.IdeaServiceHandler.ShowIdeas(ctx, in, out)
}
