syntax = "proto3";
package go.micro.srv.ideas;
option go_package="idea";

import "google/protobuf/timestamp.proto";
import "github.com/jianhan/ms-sui-ideas/proto/occupation/occupation.proto";
import "google/protobuf/empty.proto";

// AppType defines application type
enum AppType {
    WEB = 0;
    MOBILE = 1;
    DESKTOP = 2;
    OTHER=3;
}

// Pirority defines a set of pirorities
enum Pirority {
    UNSET=0;
    NICE_TO_HAVE = 1;
    SHOULD_HAVE = 2;
    MUST_HAVE = 3;
}

message Idea {
    // @inject_tag: bson:"_id" valid:"required~ID is required, uuidv4~ID must be a valid UUIDv4" conform:"trim"
    string ID = 1;
    // @inject_tag: bson:"name" valid:"required~Name is required" conform:"trim"
    string name = 2;
    // @inject_tag: bson:"slug" valid:"required~Slug is required" conform:"trim"
    string slug = 3;
    // @inject_tag: bson:"description" valid:"required~Description is required" conform:"trim"
    string description = 4;
    // @inject_tag: bson:"hidden"
    bool hidden = 5;
    // @inject_tag: bson:"app_types" valid:"required~App types is required"
    repeated AppType app_types = 6;
    // @inject_tag: bson:"min_age" valid:"range(8|99)~Invalid min age range, must between 8 and 99"
    uint64 min_age = 7;
    // @inject_tag: bson:"max_age" valid:"range(8|99)~Invalid max age range, must between 8 and 99"
    uint64 max_age = 8;
    // @inject_tag: bson:"ratings"
    repeated Rating ratings = 9;
    // @inject_tag: bson:"rating"
    float rating = 10;
    // @inject_tag: bson:"stories"
    repeated Story stories = 11;
    // @inject_tag: bson:"occupations"
    repeated Occupation occupations = 12;
    // @inject_tag: bson:"created_at"
    google.protobuf.Timestamp created_at = 13;
    // @inject_tag: bson:"updated_at"
    google.protobuf.Timestamp updated_at = 14;
}

message Story {
    // @inject_tag: bson:"title" valid:"required~Title is required" conform:"trim"
    string title = 1;
    // @inject_tag: bson:"pirority" valid:"required~Pirority is required"
    Pirority pirority = 2;
    // @inject_tag: bson:"role" valid:"required~Who is required" conform:"trim"
    string who = 3;
    // @inject_tag: bson:"action" valid:"required~What is required" conform:"trim"
    string what = 4;
    // @inject_tag: bson:"goal" valid:"required~Goal is required" conform:"trim"
    string goal = 5;
    // @inject_tag: bson:"order"
    uint64 order = 6;
    // @inject_tag: bson:"hidden"
    bool hidden = 7;
    // @inject_tag: bson:"created_at"
    google.protobuf.Timestamp created_at = 8;
    // @inject_tag: bson:"updated_at"
    google.protobuf.Timestamp updated_at = 9;
}

message Rating {
    // @inject_tag: bson:"user_id" valid:"required~User ID is required, uuidv4~User ID must be a valid UUIDv4" conform:"trim"
    string user_id = 1;
    // @inject_tag: bson:"value" valid:"required~Rating value is required, uuidv4~User ID must be a valid UUIDv4, range(0.5|5)~Invalid rating value, must between 0.5 and 5"
    float value = 2;
    // @inject_tag: bson:"created_at"
    google.protobuf.Timestamp created_at = 3;
    // @inject_tag: bson:"updated_at"
    google.protobuf.Timestamp updated_at = 4;
}

message IdeaFilter {
    repeated string ids = 1;
    repeated string names = 2;
    bool hidden = 3;
    repeated AppType app_types = 4;
    uint64 min_age = 5;
    uint64 max_age = 6;
    float min_rating = 7;
    float max_rating = 8;
    repeated Occupation occupations = 9;
    uint64 current_page = 10;
    uint64 per_page = 11;
    string query = 12;
    repeated string sorts = 13;
}

// Service declares all RPC calls for ideas related functions.
service IdeaService {
    rpc ListIdeas(IdeaFilter) returns (ListIdeasResponse) {}
    rpc CreateIdeas(UpsertIdeasRequest) returns (CreateIdeasResponse) {}
    rpc UpdateIdeas(UpsertIdeasRequest) returns (UpdateIdeasResponse) {}
    rpc DeleteIdeas(IdeaFilter) returns (DeleteIdeasResponse) {}
    rpc HideIdeas(IdeaFilter) returns (google.protobuf.Empty) {}
    rpc ShowIdeas(IdeaFilter) returns (google.protobuf.Empty) {}
    rpc AddRatings(AddRatingsRequest) returns (AddRatingsResponse) {}

}

message ListIdeasResponse {
    repeated Idea ideas = 1;
}

message ShowIdeasRequest {
    repeated string ids = 1;
}

message UpsertIdeasRequest {
    repeated Idea ideas = 1;
}

message CreateIdeasResponse {
    int64 matched = 1;
    int64 modified = 2;
    repeated Idea ideas = 3;
}

message UpdateIdeasResponse {
    int64 matched = 1;
    int64 modified = 2;
    repeated Idea ideas = 3;
}

message DeleteIdeasResponse {
    int64 deleted = 1;
}

message AddRatingsRequest {
    string idea_id = 1;
    repeated Rating ratings = 2;
}

message AddRatingsResponse {
    Idea idea = 1;
}
