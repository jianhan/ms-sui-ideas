// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/story/story.proto

/*
Package story is a generated protocol buffer package.

It is generated from these files:
	proto/story/story.proto

It has these top-level messages:
	ShowStoriesRequest
	ShowIdeasResponse
	HideStoriesRequest
	HideStoriesResponse
	DeleteStoriesRequest
	DeleteStoriesResponse
	CreateStoriesRequest
	CreateStoriesResponse
	UpdateStoriesRequest
	UpdateStoriesResponse
	Story
*/
package story

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StoryService service

type StoryServiceClient interface {
	CreateStories(ctx context.Context, in *CreateStoriesRequest, opts ...client.CallOption) (*CreateStoriesResponse, error)
	UpdateStories(ctx context.Context, in *UpdateStoriesRequest, opts ...client.CallOption) (*UpdateStoriesResponse, error)
	HideStories(ctx context.Context, in *HideStoriesRequest, opts ...client.CallOption) (*HideStoriesResponse, error)
	ShowStories(ctx context.Context, in *ShowStoriesRequest, opts ...client.CallOption) (*ShowIdeasResponse, error)
	DeleteStories(ctx context.Context, in *DeleteStoriesRequest, opts ...client.CallOption) (*DeleteStoriesResponse, error)
}

type storyServiceClient struct {
	c           client.Client
	serviceName string
}

func NewStoryServiceClient(serviceName string, c client.Client) StoryServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.ideas"
	}
	return &storyServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *storyServiceClient) CreateStories(ctx context.Context, in *CreateStoriesRequest, opts ...client.CallOption) (*CreateStoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StoryService.CreateStories", in)
	out := new(CreateStoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) UpdateStories(ctx context.Context, in *UpdateStoriesRequest, opts ...client.CallOption) (*UpdateStoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StoryService.UpdateStories", in)
	out := new(UpdateStoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) HideStories(ctx context.Context, in *HideStoriesRequest, opts ...client.CallOption) (*HideStoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StoryService.HideStories", in)
	out := new(HideStoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) ShowStories(ctx context.Context, in *ShowStoriesRequest, opts ...client.CallOption) (*ShowIdeasResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StoryService.ShowStories", in)
	out := new(ShowIdeasResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storyServiceClient) DeleteStories(ctx context.Context, in *DeleteStoriesRequest, opts ...client.CallOption) (*DeleteStoriesResponse, error) {
	req := c.c.NewRequest(c.serviceName, "StoryService.DeleteStories", in)
	out := new(DeleteStoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StoryService service

type StoryServiceHandler interface {
	CreateStories(context.Context, *CreateStoriesRequest, *CreateStoriesResponse) error
	UpdateStories(context.Context, *UpdateStoriesRequest, *UpdateStoriesResponse) error
	HideStories(context.Context, *HideStoriesRequest, *HideStoriesResponse) error
	ShowStories(context.Context, *ShowStoriesRequest, *ShowIdeasResponse) error
	DeleteStories(context.Context, *DeleteStoriesRequest, *DeleteStoriesResponse) error
}

func RegisterStoryServiceHandler(s server.Server, hdlr StoryServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&StoryService{hdlr}, opts...))
}

type StoryService struct {
	StoryServiceHandler
}

func (h *StoryService) CreateStories(ctx context.Context, in *CreateStoriesRequest, out *CreateStoriesResponse) error {
	return h.StoryServiceHandler.CreateStories(ctx, in, out)
}

func (h *StoryService) UpdateStories(ctx context.Context, in *UpdateStoriesRequest, out *UpdateStoriesResponse) error {
	return h.StoryServiceHandler.UpdateStories(ctx, in, out)
}

func (h *StoryService) HideStories(ctx context.Context, in *HideStoriesRequest, out *HideStoriesResponse) error {
	return h.StoryServiceHandler.HideStories(ctx, in, out)
}

func (h *StoryService) ShowStories(ctx context.Context, in *ShowStoriesRequest, out *ShowIdeasResponse) error {
	return h.StoryServiceHandler.ShowStories(ctx, in, out)
}

func (h *StoryService) DeleteStories(ctx context.Context, in *DeleteStoriesRequest, out *DeleteStoriesResponse) error {
	return h.StoryServiceHandler.DeleteStories(ctx, in, out)
}
